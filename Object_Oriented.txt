Abstraction

Abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user.
The user will have the information on what the object does instead of how it does it.
In Java, abstraction is achieved using Abstract class and interfaces.

Encapsulation

Encapsulation is a mechanism of wrapping the data(variables) and code acting on the data or methods together as a single unit. 
The variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class.
It is also known as data hiding.
To achieve encapsulation:
- Declare the variables of class as private
- Provide public setter and getter methods to modify and view the variables values
Benefits:
- The fields can be made read-only or write-only
- The class can have total control over what is stored in its fields
- The users of a class do not know how the class stores its data. A class can change the data type of a field and users of the class do not need to change any of their code

Polymorphism

(Different class has)The ability to present the same interface with different underlying forms (data types)
For example: Square, rectangle, circle, line and point all are shape class, but have different underlying data
Every class have its own draw function, instead of doing drawSquare and drawCircle in traditional ways

Inheritance

The process where one class can use the properties (methods and fields) of another.
With the use of inheritance the information is made manageable in a hierarchical order. 
The class which inherits the properties of other is known as subclass or child class and
the class got inherited is known as superclass (base, parent class)


Interface vs Abstract class

1. Interface cannot have implementations, abstract class can have instance methods that implement default behaviors
2. Usually class can implement mulitple interfaces, but can only extend one abstract class
3. Members in interface are public by default, abstract classes can have members like private, protected
4. Grammer difference: "extends" and "implements"

When should we use interface and when for abstract classes?

If we know all the class will have the same default behavior, we use abstract class.
Otherwise, if all the class will have different implementation, we use interface.
Example:
public interface LoginAuth{
   public String encryptPassword(String pass);
   public void checkDBforUser();
}
public class DBMySQL implements LoginAuth{
          // Needs to implement both methods
}
public class DBOracle implements LoginAuth{
          // Needs to implement both methods
}
public class DBAbc implements LoginAuth{
          // Needs to implement both methods
}

But what if encryptPassword() is not database dependent, and it's the same for each class? Then the above would not be a good approach.

Instead, consider this approach:

public abstract class LoginAuth{
   public String encryptPassword(String pass){
            // Implement the same default behavior here 
            // that is shared by all subclasses.
   }

   // Each subclass needs to provide their own implementation of this only:
   public abstract void checkDBforUser();
}